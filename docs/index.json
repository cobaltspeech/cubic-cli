[
{
	"uri": "https://cobaltspeech.github.io/cubic-cli/cli/",
	"title": "Cubic command-line interface",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cobaltspeech.github.io/cubic-cli/cli/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": "The cubic-cli binary provides a convenient way to generate transcripts from an audio file in order to evaluate a model. It accepts either a single audio file or a list of files, sends the audio to a running instance of cubicsvr, and outputs the transcript in one of several formats.\n   Command Purpose     cubic-cli Prints the default help message.   cubic-cli models Displays the transcription models being served by the given instance.   cubic-cli version Displays the versions of both the client and the server.   cubic-cli transcribe Sends audio file(s) to server for transcription.    [cmd] --help can be run on any command for more details on usage and included flags.\nGlobal Flags All commands accept the following flags\n   Short Long form Arg Purpose      --insecure none By default, connections to the server are encrypted (TLS). Include'--insecure if you want TLS disabled.   -s --server string Address of running cubicsvr instance. Format should be \u0026lsquo;address:port\u0026rsquo;. (default \u0026ldquo;localhost:2727\u0026rdquo;)   -h --help none Display more details on usage and available flags    Examples Note: These commands assume that the your instance of cubic server is available at localhost:2727 and that the command is being run from the root of the cubic-cli directory.\nIf you do not have a local instance, Cobalt\u0026rsquo;s demo server can be accessed with --server demo-cubic.cobaltspeech.com:2727. This uses TLS and does not need the --insecure flag.\n Commercial use of the demo service is not permitted. This server is for testing and demonstration purposes only and is not guaranteed to support high availability or high volume. Data uploaded to the server may be stored for internal purposes.\n # Display the versions of client and server ./bin/cubic-cli --insecure --server localhost:2727 version # List available models. Note: The listed modelIDs are used in transcription methods ./bin/cubic-cli --insecure --server localhost:2727 models # Transcribe the single file this_is_a_test-en_us-16.wav using modelId1. # (On the demo server, modelId 1 is the U.S. English 16 kHz model--the model id depends on the # cubic server configuration.) # Should result in the transcription of \u0026#34;this is a test\u0026#34; ./bin/cubic-cli --insecure --server localhost:2727 -m 1 transcribe ./testdata/this_is_a_test-en_us-16.wav For more examples of the transcribe command, see Transcribe\n"
},
{
	"uri": "https://cobaltspeech.github.io/cubic-cli/cli/transcribe/",
	"title": "Transcribe Command",
	"tags": [],
	"description": "",
	"content": "This command is used for transcribing audio files. There are two modes: single file or list file.\nUsage:\ntranscribe FILE_PATH [flags]  In single mode, FILE_PATH should point to a single audio file.\nIn list-file mode, FILE_PATH should point to a file listing multiple audio files with the format \u0026ldquo;Utterance_ID \\t FILE_PATH \\n\u0026rdquo;.\nAudio files in the following formats are supported: WAV, FLAC, MP3, VOX, and RAW(PCM16SLE).\nThe file extension (wav, flac, mp3, vox, raw) will be used to determine which codec to use. Use WAV or FLAC for best results.\n   Short Long form Arg Purpose     -l --list-file none Indicates that FILE_PATH is pointing to a list of audio files.   -o --output string Path to directory where the results should be written.\u0026rdquo;-\u0026rdquo; indicates stdout. (default \u0026ldquo;-\u0026rdquo;)   -m --model string Selects which model ID to use for transcribing. (default \u0026ldquo;1\u0026rdquo;)   -c --audioChannels ints Audio channels to transcribe. (Defaults to mono)    --stereo none Sets --audioChannels \u0026quot;0,1\u0026quot; to transcribe both audio channels of a stereo file.   -n --workers int Number of concurrent requests to send to cubicsvr. (default 1)   -f --outputFormat string Format of output. Can be [json,json-pretty,timeline,utterance-json]. (default \u0026ldquo;timeline\u0026rdquo;)   -a --fmt.timeline.maxAlts int Maximum number of alternatives to provide for each result in the timeline format. (default 1)    List-file To process multiple files, use the --list-file flag and specify a text file instead of an audio file. The text file should be tab-delimited, with one audio file per line. Each line should begin with a unique identifier containing no white space, which will be used to identify which transcript belongs to which input file.\nExample:\nutterance1 /mnt/audio/abcd.wav utterance2 /mnt/audio/efgh.wav  When cubic-cli writes to stdout (-o \u0026quot;-\u0026quot;), each output will be prefaced by the utterance id and an extra newline.\nOutput Output must be an existing directory to which the transcripts will be written.\nIn single-file mode, the transcript will be given the same name as the audio file, with a .txt extension.\nIn list-file mode, each file processed will have a separate output file, using the utteranceID as the filename with a \u0026ldquo;.txt\u0026rdquo; extention.\nIn either mode, \u0026ldquo;-\u0026rdquo; prints to stdout, which is the default behavior.\nModel A cubicsvr instance may be configured to use one or more models, each with a model id specified in cubicsvr.cfg.toml. The specified id must be one of the ones configured for the cubicsvr instance.\nFor example, if connecting to the demo server, model=1 specifies the U.S. English 16 kHz model and model=2 specifies the U.S. English 8 kHz model.\nThe models for a server may be listed by calling ./bin/cubic-cli --insecure --server localhost:2727 models.\nExample:\n$ bin/cubic-cli -s demo-cubic.cobaltspeech.com:2727 models Model ID \u0026#39;\u0026#34;1\u0026#34;\u0026#39;: English (US) 16KHz (Sample Rate: 16000) Model ID \u0026#39;\u0026#34;2\u0026#34;\u0026#39;: English (US) 8KHz (Sample Rate: 8000) Model ID \u0026#39;\u0026#34;3\u0026#34;\u0026#39;: Portuguese (BR) 8KHz (Sample Rate: 8000) Model ID \u0026#39;\u0026#34;4\u0026#34;\u0026#39;: Spanish (ES) 16KHz (Sample Rate: 16000) $ bin/cubic-cli -s demo-cubic.cobaltspeech.com:2727 transcribe -m 2 sample-8khz.wav  Audio channels By default, cubic-svr assumes the input is a mono file and transcribes channel 0. Pass --audioChannels to specify other channels.\nE.g. -c \u0026quot;0,2\u0026quot; would transcribe the first and third channels in the file.\n--stereo is equivalent to -c 0,1\n-c or --audioChannel overrides --stereo if both are provided.\nWorkers The workers parameter limits the number of requests to send to cubicsvr at once.\nPlease note, while this value is defined client-side, the throughput will be limited by the available computational ability of the server. If you are the only connection to an 8-core server, then \u0026ldquo;-n 8\u0026rdquo; is a reasonable value.\nOutput format See Formats\nExamples There are two audio files in the testdata folder. They are US English, recorded at 16kHz. The filenames contain the intended transcription.\nAs a quick start, these commands are provided as examples of how to use the binary. They should be run from the root directory of cubic-cli.\nNote: These examples show commands both for a local instance (assuming cubic server is running at localhost:2727) and for calling Cobalt\u0026rsquo;s demo server. (--server demo-cubic.cobaltspeech.com:2727). The demo server uses TLS and does not need the --insecure flag. Any of the examples could be run against either server. All examples use the default modelId (1), which is the U.S. English 16 kHz model on the demo server, but there may be a different model in the local instance which is not a good fit for the sample audio files provided.\n Commercial use of the demo service is not permitted. This server is for testing and demonstration purposes only and is not guaranteed to support high availability or high volume. Data uploaded to the server may be stored for internal purposes.\n # Display the versions of client and server ./bin/cubic-cli --insecure --server localhost:2727 version # List available models. Note: The listed modelIDs are used in transcription methods ./bin/cubic-cli --insecure --server localhost:2727 models # Transcribe the single file this_is_a_test-en_us-16.wav. # Should result in the transcription of \u0026#34;this is a test\u0026#34; ./bin/cubic-cli --insecure --server localhost:2727 \\  transcribe ./testdata/this_is_a_test-en_us-16.wav # Transcribe the list of files defined at ./testdata/list.txt # Should result in the transcription of \u0026#34;this is a test\u0026#34; and \u0026#34;the second test\u0026#34; printed to stdout ./bin/cubic-cli --insecure --server localhost:2727 \\  transcribe --list-file ./testdata/list.txt # Same as the previous `transcribe` command, but will create two text files in thie testdata directory # and may send up to two files at a time to the demo server ./bin/cubic-cli --server demo-cubic.cobaltspeech.com:2727 \\  transcribe --list-file ./testdata/list.txt \\  --output ./testdata --workers 2 # Transcribe multiple channels. Note: this is the same as \u0026#39;--stereo\u0026#39; ./bin/cubic-cli --server demo-cubic.cobaltspeech.com:2727 \\  transcribe ./testdata/this_is_a_test-en_us-16.wav \\  --audioChannels 0,1 # Select different output format. --outputFormat json allows you to easily # pipe the results to another program. ./bin/cubic-cli --insecure --server localhost:2727 \\  transcribe ./testdata/this_is_a_test-en_us-16.wav \\  --outputFormat json"
},
{
	"uri": "https://cobaltspeech.github.io/cubic-cli/cli/formats/",
	"title": "Output formats",
	"tags": [],
	"description": "",
	"content": "There are four different output options supported:\n timeline json json-pretty utterance-json  All the output options return a list of JSON representations of each result recognized in the transcript. Cubic can be configured with different endpoint settings to determine how long a pause between words will begin a new result; the default is half a second.\nTimeline Timeline is the default output format. For multi-channel audio, it sorts the results from different channels by their start times, showing the conversation in order.\nFields  channel_id: Which channel produced the results nbest: The alternatives recognized for each result. By default, only the most likely alternative is returned for each result. Specify --fmt.timeline.maxAlts to include additional, lower confidence, results.  start_time: Number of milliseconds since the beginning of the audio file duration: Number of milliseconds for the entire result confidence: Number between 0 and 1 representing the probability of this result vs the other alternatives transcript: Full result (up to the endpoint) words: Array of the individual confidence, duration, and start time for each word in the transcript. Can be used to provide finer alignment to the audio.   Example bin/cubic-cli -s localhost:2727 transcribe -m 1 -f timeline --stereo --insecure 2-channel.wav  Click here to see sample output\n[ { \u0026#34;channel_id\u0026#34;: 0, \u0026#34;nbest\u0026#34;: [ { \u0026#34;words\u0026#34;: [ { \u0026#34;start_time\u0026#34;: 1980, \u0026#34;duration\u0026#34;: 240, \u0026#34;word\u0026#34;: \u0026#34;Thank\u0026#34;, \u0026#34;confidence\u0026#34;: 1 }, { \u0026#34;start_time\u0026#34;: 2220, \u0026#34;duration\u0026#34;: 120, \u0026#34;word\u0026#34;: \u0026#34;you\u0026#34;, \u0026#34;confidence\u0026#34;: 1 }, { \u0026#34;start_time\u0026#34;: 2340, \u0026#34;duration\u0026#34;: 120, \u0026#34;word\u0026#34;: \u0026#34;for\u0026#34;, \u0026#34;confidence\u0026#34;: 1 }, { \u0026#34;start_time\u0026#34;: 2460, \u0026#34;duration\u0026#34;: 330, \u0026#34;word\u0026#34;: \u0026#34;calling\u0026#34;, \u0026#34;confidence\u0026#34;: 1 }, { \u0026#34;start_time\u0026#34;: 2800, \u0026#34;duration\u0026#34;: 470, \u0026#34;word\u0026#34;: \u0026#34;Acme.\u0026#34;, \u0026#34;confidence\u0026#34;: 0.943 }, { \u0026#34;start_time\u0026#34;: 3660, \u0026#34;duration\u0026#34;: 120, \u0026#34;word\u0026#34;: \u0026#34;How\u0026#34;, \u0026#34;confidence\u0026#34;: 1 }, { \u0026#34;start_time\u0026#34;: 3780, \u0026#34;duration\u0026#34;: 180, \u0026#34;word\u0026#34;: \u0026#34;may\u0026#34;, \u0026#34;confidence\u0026#34;: 1 }, { \u0026#34;start_time\u0026#34;: 3960, \u0026#34;duration\u0026#34;: 60, \u0026#34;word\u0026#34;: \u0026#34;I\u0026#34;, \u0026#34;confidence\u0026#34;: 1 }, { \u0026#34;start_time\u0026#34;: 4020, \u0026#34;duration\u0026#34;: 270, \u0026#34;word\u0026#34;: \u0026#34;direct\u0026#34;, \u0026#34;confidence\u0026#34;: 1 }, { \u0026#34;start_time\u0026#34;: 4290, \u0026#34;duration\u0026#34;: 120, \u0026#34;word\u0026#34;: \u0026#34;your\u0026#34;, \u0026#34;confidence\u0026#34;: 1 }, { \u0026#34;start_time\u0026#34;: 4410, \u0026#34;duration\u0026#34;: 450, \u0026#34;word\u0026#34;: \u0026#34;call.\u0026#34;, \u0026#34;confidence\u0026#34;: 1 } ], \u0026#34;start_time\u0026#34;: 1980, \u0026#34;duration\u0026#34;: 2880, \u0026#34;confidence\u0026#34;: 0.902, \u0026#34;transcript\u0026#34;: \u0026#34;Thank you for calling Acme. How may I direct your call.\u0026#34; } ] }, { \u0026#34;channel_id\u0026#34;: 1, \u0026#34;nbest\u0026#34;: [ { \u0026#34;words\u0026#34;: [ { \u0026#34;start_time\u0026#34;: 6180, \u0026#34;duration\u0026#34;: 300, \u0026#34;word\u0026#34;: \u0026#34;Mary\u0026#34;, \u0026#34;confidence\u0026#34;: 0.877 }, { \u0026#34;start_time\u0026#34;: 7128, \u0026#34;duration\u0026#34;: 462, \u0026#34;word\u0026#34;: \u0026#34;please.\u0026#34;, \u0026#34;confidence\u0026#34;: 1 } ], \u0026#34;start_time\u0026#34;: 6180, \u0026#34;duration\u0026#34;: 1410, \u0026#34;confidence\u0026#34;: 0.362, \u0026#34;transcript\u0026#34;: \u0026#34;Mary please.\u0026#34; } ] }, { \u0026#34;channel_id\u0026#34;: 0, \u0026#34;nbest\u0026#34;: [ { \u0026#34;words\u0026#34;: [ { \u0026#34;start_time\u0026#34;: 8880, \u0026#34;duration\u0026#34;: 600, \u0026#34;word\u0026#34;: \u0026#34;Certainly\u0026#34;, \u0026#34;confidence\u0026#34;: 1 }, { \u0026#34;start_time\u0026#34;: 9780, \u0026#34;duration\u0026#34;: 240, \u0026#34;word\u0026#34;: \u0026#34;please\u0026#34;, \u0026#34;confidence\u0026#34;: 1 }, { \u0026#34;start_time\u0026#34;: 10020, \u0026#34;duration\u0026#34;: 210, \u0026#34;word\u0026#34;: \u0026#34;hold\u0026#34;, \u0026#34;confidence\u0026#34;: 1 }, { \u0026#34;start_time\u0026#34;: 10230, \u0026#34;duration\u0026#34;: 180, \u0026#34;word\u0026#34;: \u0026#34;on\u0026#34;, \u0026#34;confidence\u0026#34;: 1 }, { \u0026#34;start_time\u0026#34;: 10410, \u0026#34;duration\u0026#34;: 120, \u0026#34;word\u0026#34;: \u0026#34;for\u0026#34;, \u0026#34;confidence\u0026#34;: 1 }, { \u0026#34;start_time\u0026#34;: 10530, \u0026#34;duration\u0026#34;: 112, \u0026#34;word\u0026#34;: \u0026#34;just\u0026#34;, \u0026#34;confidence\u0026#34;: 0.622 }, { \u0026#34;start_time\u0026#34;: 10664, \u0026#34;duration\u0026#34;: 114, \u0026#34;word\u0026#34;: \u0026#34;a\u0026#34;, \u0026#34;confidence\u0026#34;: 0.744 }, { \u0026#34;start_time\u0026#34;: 10778, \u0026#34;duration\u0026#34;: 532, \u0026#34;word\u0026#34;: \u0026#34;minute.\u0026#34;, \u0026#34;confidence\u0026#34;: 1 } ], \u0026#34;start_time\u0026#34;: 8880, \u0026#34;duration\u0026#34;: 2430, \u0026#34;confidence\u0026#34;: 0.461, \u0026#34;transcript\u0026#34;: \u0026#34;Certainly please hold on for just a minute.\u0026#34; } ] } ] \nJson and Json-pretty Both json and json-pretty return the same data. The only difference is that json-pretty includes line breaks and indentation to make it more human-readable. Both formats return all alternatives recognized for each result, with the default JSON encoding for the RecognitionAlternative object. That encoding makes it straightforward to deserialize start_time and duration fields into google.protobuf.Duration objects, but may not be as human-readable because the JSON encoding for Duration objects has separate fields for seconds and nanoseconds.\nWord-level information is not included and the results are the order cubic processed them, so results from different channels are not guaranteed to be ordered according to their timestamps.\nExample bin/cubic-cli -s demo-cubic.cobaltspeech.com:2727 transcribe -m 1 -f json-pretty testdata/this_is_a_test-en_us-16.wav   Click here to see sample output\n{ \u0026#34;UttID\u0026#34;: \u0026#34;this_is_a_test-en_us-16.wav\u0026#34;, \u0026#34;Responses\u0026#34;: [ { \u0026#34;alternatives\u0026#34;: [ { \u0026#34;transcript\u0026#34;: \u0026#34;This is a test.\u0026#34;, \u0026#34;confidence\u0026#34;: 0.994, \u0026#34;start_time\u0026#34;: { \u0026#34;nanos\u0026#34;: 900000000 }, \u0026#34;duration\u0026#34;: { \u0026#34;seconds\u0026#34;: 1, \u0026#34;nanos\u0026#34;: 50000000 } }, { \u0026#34;transcript\u0026#34;: \u0026#34;Hi this is a test.\u0026#34;, \u0026#34;confidence\u0026#34;: 0.006, \u0026#34;start_time\u0026#34;: { \u0026#34;nanos\u0026#34;: 5000000 }, \u0026#34;duration\u0026#34;: { \u0026#34;seconds\u0026#34;: 1, \u0026#34;nanos\u0026#34;: 945000000 } } ] } ] } \nUtterance-json Utterance-json is a tab-delimited format, included for backward compatibility with asr_tool, the previous command-line test utility for cubic.\nEach result is a separate line with the identifier separated from the json representation of the result by a tab character:\n\u0026lt;utteranceId\u0026gt;_\u0026lt;resultIndex\u0026gt; \u0026lt;tab\u0026gt; {\u0026lt;result json\u0026gt;}  Example bin/cubic-cli -s demo-cubic.cobaltspeech.com:2727 transcribe -m 1 -f utterance-json --list-file testdata/list.txt   Click here to see sample output\nUtterance_1_0\t{\u0026quot;alternatives\u0026quot;:[{\u0026quot;transcript\u0026quot;:\u0026quot;This is a test.\u0026quot;,\u0026quot;confidence\u0026quot;:0.994,\u0026quot;start_time\u0026quot;:{\u0026quot;nanos\u0026quot;:900000000},\u0026quot;duration\u0026quot;:{\u0026quot;seconds\u0026quot;:1,\u0026quot;nanos\u0026quot;:50000000}},{\u0026quot;transcript\u0026quot;:\u0026quot;Hi this is a test.\u0026quot;,\u0026quot;confidence\u0026quot;:0.006,\u0026quot;start_time\u0026quot;:{\u0026quot;nanos\u0026quot;:5000000},\u0026quot;duration\u0026quot;:{\u0026quot;seconds\u0026quot;:1,\u0026quot;nanos\u0026quot;:945000000}}]} Utterance_1_1\t{\u0026quot;alternatives\u0026quot;:[{\u0026quot;transcript\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;confidence\u0026quot;:0.731},{\u0026quot;transcript\u0026quot;:\u0026quot;Yeah.\u0026quot;,\u0026quot;confidence\u0026quot;:0.163,\u0026quot;start_time\u0026quot;:{\u0026quot;seconds\u0026quot;:3,\u0026quot;nanos\u0026quot;:261000000},\u0026quot;duration\u0026quot;:{\u0026quot;seconds\u0026quot;:1,\u0026quot;nanos\u0026quot;:801000000}},{\u0026quot;transcript\u0026quot;:\u0026quot;I.\u0026quot;,\u0026quot;confidence\u0026quot;:0.039,\u0026quot;start_time\u0026quot;:{\u0026quot;seconds\u0026quot;:3,\u0026quot;nanos\u0026quot;:261000000},\u0026quot;duration\u0026quot;:{\u0026quot;seconds\u0026quot;:1,\u0026quot;nanos\u0026quot;:801000000}},{\u0026quot;transcript\u0026quot;:\u0026quot;Hey.\u0026quot;,\u0026quot;confidence\u0026quot;:0.036,\u0026quot;start_time\u0026quot;:{\u0026quot;seconds\u0026quot;:3,\u0026quot;nanos\u0026quot;:261000000},\u0026quot;duration\u0026quot;:{\u0026quot;seconds\u0026quot;:1,\u0026quot;nanos\u0026quot;:801000000}},{\u0026quot;transcript\u0026quot;:\u0026quot;Bye.\u0026quot;,\u0026quot;confidence\u0026quot;:0.032,\u0026quot;start_time\u0026quot;:{\u0026quot;seconds\u0026quot;:3,\u0026quot;nanos\u0026quot;:261000000},\u0026quot;duration\u0026quot;:{\u0026quot;seconds\u0026quot;:1,\u0026quot;nanos\u0026quot;:801000000}}]} Utterance_2_0\t{\u0026quot;alternatives\u0026quot;:[{\u0026quot;transcript\u0026quot;:\u0026quot;The second test.\u0026quot;,\u0026quot;confidence\u0026quot;:0.6,\u0026quot;start_time\u0026quot;:{\u0026quot;nanos\u0026quot;:944000000},\u0026quot;duration\u0026quot;:{\u0026quot;seconds\u0026quot;:1,\u0026quot;nanos\u0026quot;:96000000}},{\u0026quot;transcript\u0026quot;:\u0026quot;What the second test.\u0026quot;,\u0026quot;confidence\u0026quot;:0.154,\u0026quot;start_time\u0026quot;:{},\u0026quot;duration\u0026quot;:{\u0026quot;seconds\u0026quot;:2,\u0026quot;nanos\u0026quot;:40000000}},{\u0026quot;transcript\u0026quot;:\u0026quot;At the second test.\u0026quot;,\u0026quot;confidence\u0026quot;:0.134,\u0026quot;start_time\u0026quot;:{},\u0026quot;duration\u0026quot;:{\u0026quot;seconds\u0026quot;:2,\u0026quot;nanos\u0026quot;:40000000}},{\u0026quot;transcript\u0026quot;:\u0026quot;But the second test.\u0026quot;,\u0026quot;confidence\u0026quot;:0.09,\u0026quot;start_time\u0026quot;:{},\u0026quot;duration\u0026quot;:{\u0026quot;seconds\u0026quot;:2,\u0026quot;nanos\u0026quot;:40000000}},{\u0026quot;transcript\u0026quot;:\u0026quot;Is the second test.\u0026quot;,\u0026quot;confidence\u0026quot;:0.022,\u0026quot;start_time\u0026quot;:{},\u0026quot;duration\u0026quot;:{\u0026quot;seconds\u0026quot;:2,\u0026quot;nanos\u0026quot;:40000000}}]}  \n"
},
{
	"uri": "https://cobaltspeech.github.io/cubic-cli/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Cubic Command Line Interface \u0026ndash; Cobalt\n"
},
{
	"uri": "https://cobaltspeech.github.io/cubic-cli/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://cobaltspeech.github.io/cubic-cli/",
	"title": "Cubic Command Line Tool Documentation",
	"tags": [],
	"description": "",
	"content": " Cubic Overview Cubic is Cobalt’s automatic speech recognition (ASR) engine. It can be deployed on-prem and accessed over the network or on your local machine via this command-line tool. The tool is written using our public-facing SDK so the source code provides an example of how to use the SDK.\nFormatted output Speech recognition systems typically output the words that were spoken, with no formatting. For example, utterances with numbers in might return “twenty seven bridges”, and “the year two thousand and three”. Cubic has the option to enable basic formatting of speech recognition results:\n Capitalising the first letter of the utterance Numbers: “cobalt’s atomic number is twenty seven” -\u0026gt; “Cobalt’s atomic number is 27” Truecasing: “the iphone was launched in two thousand and seven” -\u0026gt; “The iPhone was launched in 2007” Ordinals: “summer solstice is twenty first june” -\u0026gt; “Summer solstice is 21st June” Punctuation: \u0026ldquo;from mid april on the rain has ben incessant\u0026rdquo; -\u0026gt; \u0026ldquo;From mid-April on, the rain has been incessant.\u0026rdquo;  The cubic server configuration determines which of these formatting rules will apply; for instance, you might choose to enable punctuation but not change number words or vice versa depending on how the output will be used.\nObtaining Cubic Cobalt will provide you with a package of Cubic that contains the engine, appropriate speech recognition models and a server application. This server exports Cubic\u0026rsquo;s functionality over the gRPC protocol. The https://github.com/cobaltspeech/sdk-cubic repository contains the SDK that you can use in your application to communicate with the Cubic server. This SDK is currently available for the Go and Python languages; and we would be happy to talk to you if you need support for other languages. Most of the core SDK is generated automatically using the gRPC tools, and Cobalt provides a top level package for more convenient API calls.\n"
},
{
	"uri": "https://cobaltspeech.github.io/cubic-cli/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]